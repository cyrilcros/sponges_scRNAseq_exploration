num_clusters = 1,
cores = 1,
show_rownames = T,
add_annotation_col = pData(dCellDataSet2$Pseudotime))
plot_pseudotime_heatmap(dCellDataSet2[top100_gene_indices,],
num_clusters = 1,
cores = 1,
show_rownames = T,
add_annotation_col = pData(dCellDataSet2)$Pseudotime)
plot_pseudotime_heatmap(dCellDataSet2[top100_gene_indices,],
num_clusters = 1,
cores = 1,
show_rownames = T,
add_annotation_col = pData(dCellDataSet2)$cell_type2)
head(pData(dCellDataSet2)$cell_type2)
plot_pseudotime_heatmap(dCellDataSet2[top100_gene_indices,],
num_clusters = 1,
cores = 1,
show_rownames = T,
add_annotation_col = pData(dCellDataSet2)$cell_type2[top100_gene_indices])
pData(dCellDataSet2)$cell_type2[top100_gene_indices]
head(annotation_col <- pData(dCellDataSet2)$cell_type2)
annotation_col <- data.frame(cell_type2 = pData(dCellDataSet2)$cell_type2)
head(annotation_col)
plot_pseudotime_heatmap(dCellDataSet2[top100_gene_indices,],
num_clusters = 1,
cores = 1,
show_rownames = T,
add_annotation_col = annotation_col[top100_gene_indices,1])
annotation_col[top100_gene_indices,1]
annotation_col
plot_pseudotime_heatmap(dCellDataSet2[top100_gene_indices,],
num_clusters = 1,
cores = 1,
show_rownames = T,
add_annotation_col = annotation_col[,1])
head(add_annotation_col = annotation_col[,1])
add_annotation_col = annotation_col[,1]
annotation_col[,1]
plot_pseudotime_heatmap(dCellDataSet2[top100_gene_indices,],
num_clusters = 1,
cores = 1,
show_rownames = T,
add_annotation_col = annotation_col)
annotation_col
annotation_col <- data.frame(cell_type2 = pData(dCellDataSet2)$pseudotime)
annotation_col
pData(dCellDataSet2)$pseudotime
head(pData(dCellDataSet2))
annotation_col <- data.frame(cell_type2 = pData(dCellDataSet2)$Pseudotime)
annotation_col
plot_pseudotime_heatmap(dCellDataSet2[top100_gene_indices,],
num_clusters = 1,
cores = 1,
show_rownames = T,
add_annotation_col = annotation_col)
plot_pseudotime_heatmap(dCellDataSet2[top100_gene_indices,],
num_clusters = 1,
cores = 1,
show_rownames = T)
library(tidyverse)
mapped_reads <- read_tsv(file = "star_mapping/190617_Ac_trinity_star_mapping/ReadsPerGene.out.txt")
mapped_reads <- read_tsv(file = "star_mapping/190617_Ac_trinity_star_mapping/ReadsPerGene.out_trimmed.txt")
mapped_reads
mapped_reads <- mapped_reads %>%
mutate(strand1_expressed = 1 * (strand1>0), strand2_expressed = 1 *  (strand2>0))
mapped_reads
mapped_reads <- mapped_reads %>%
mutate(strand1_expressed = 1 * (strand1>0), strand2_expressed = 1 *  (strand2>0))
sum(mapped_reads$strand1_expressed)
sum(mapped_reads$strand2_expressed)
library(tidyverse)
library(Seurat)
help("Read10X")
AcrB_filtered <- Read10X(data.dir = "/Users/jacobmusser/Documents/Research/EMBL/Projects/chitons10x/cellranger_count/190617_cellranger_count_AcrB_additional_sequencing/outs/filtered_gene_bc_matrices")
AcrB_filtered <- Read10X(data.dir = "/Users/jacobmusser/Documents/Research/EMBL/Projects/chitons10x/cellranger_count/190617_cellranger_count_AcrB_additional_sequencing/outs/filtered_gene_bc_matrices/chiton_trinity_ref")
dim(AcrB_filtered)
help(rowSums)
AcrB_rowsums <- rowSums(as.matrix(AcrB_filtered))
head(AcrB_rowsums)
mapped_reads
filter(mapped_reads, strand2>0)
AcrB_rowsums["comp1_c0",]
AcrB_rowsums["comp1_c0"]
AcrB_rowsums["comp84_c0"]
AcrB_rowsums["comp127_c0"]
AcrB_rowsums["comp130_c0"]
AcrB_rowsums["comp2_c0"]
AcrB_rowsums["comp84_c0"]
filter(mapped_reads, strand2>0) %>% head(n = 30)
filter(mapped_reads, strand2>50) %>% head(n = 30)
AcrB_rowsums["comp130_c0"]
AcrB_rowsums["comp143_c0"]
AcrB_rowsums["comp162_c0"]
AcrB_rowsums["comp186_c0"]
AcrB_rowsums["comp210_c0"]
AcrB_rowsums["comp274_c0"]
help(AverageExpression)
library(Seurat)
help(AverageExpression)
a <- c(1,2,3)
b <- c(2,1,3)
cor(a,b)
cor(log(a), log(b))
load("/Users/jacobmusser/Documents/Research/EMBL/sponge_single_cell_transcriptomics/spongilla/spongilla_final_analyses/10x_analysis/analysis_NEW8day_initial_clustering/R.objects/20180628_clustering2.RData")
## Libraries
library(Seurat)  #ver 2.3.4
library(dplyr)  #ver 0.8.1
#import 10x matrix and sample metadata
sl_count_matrix <- read.delim(file = "data/GSE134912_spongilla_10x_count_matrix.txt")
sampleID_metadata <- read.delim(file = "data/sample_ID_metadata.tsv", stringsAsFactors = F)
#initialize seurat object
sl <- CreateSeuratObject(raw.data = sl_count_matrix, project = "spongilla_sc")
sl <- AddMetaData(object = sl, metadata = sampleID_metadata)
#normalization - log counts per ten thousand
sl <- NormalizeData(object = sl, normalization.method = "LogNormalize", scale.factor = 10000)
#Identify variable genes following the method of Macosko et al. 2015
sl <- FindVariableGenes(object = sl, mean.function = ExpMean, dispersion.function = LogVMR, do.plot = F, x.low.cutoff = .025, y.cutoff = 1)
#scale and center
sl <- ScaleData(object = sl)
#principal components analysis of variable genes
sl <- RunPCA(object = sl, pc.genes = sl@var.genes, do.print = FALSE, pcs.print = 1:50, pcs.compute = 100)
setwd("/Users/jacobmusser/Documents/Research/EMBL/manuscripts/spongilla_sc_manuscript/methods/gitlab_repo/whole-body-single-cell-rna-sequencing-reveals-components-of-elementary-neural-circuits-in-a-sponge/single_cell_analysis")
## Libraries
library(Seurat)  #ver 2.3.4
library(dplyr)  #ver 0.8.1
#import 10x matrix and sample metadata
sl_count_matrix <- read.delim(file = "data/GSE134912_spongilla_10x_count_matrix.txt")
sampleID_metadata <- read.delim(file = "data/sample_ID_metadata.tsv", stringsAsFactors = F)
#initialize seurat object
sl <- CreateSeuratObject(raw.data = sl_count_matrix, project = "spongilla_sc")
sl <- AddMetaData(object = sl, metadata = sampleID_metadata)
#normalization - log counts per ten thousand
sl <- NormalizeData(object = sl, normalization.method = "LogNormalize", scale.factor = 10000)
#Identify variable genes following the method of Macosko et al. 2015
sl <- FindVariableGenes(object = sl, mean.function = ExpMean, dispersion.function = LogVMR, do.plot = F, x.low.cutoff = .025, y.cutoff = 1)
#scale and center
sl <- ScaleData(object = sl)
#principal components analysis of variable genes
sl <- RunPCA(object = sl, pc.genes = sl@var.genes, do.print = FALSE, pcs.print = 1:50, pcs.compute = 100)
length(sl@var.genes)
sl_exclusive <- sl
sl_exclusive <- RunTSNE(object = sl_exclusive, dims.use = 1:40, do.fast = TRUE, perplexity = 50, seed.use = 1)
sl
TSNEPlot(object = sl_exclusive, do.label = T, do.return = T, pt.size = 1, label.size = 4)
rm(sl_exclusive)
#manuscript tsne embeddings
manuscript_tsne_embeddings <- read.delim(file = "tsne_cell_embedding.tsv")
#manuscript tsne embeddings
manuscript_tsne_embeddings <- read.delim(file = "data/tsne_cell_embedding.tsv")
sl <- SetDimReduction(sl, reduction.type = "tsne", slot = "cell.embeddings", new.data = manuscript_tsne_embeddings)
#manuscript tsne embeddings
manuscript_tsne_embeddings <- as.matrix(read.delim(file = "data/tsne_cell_embedding.tsv"))
sl <- SetDimReduction(sl, reduction.type = "tsne", slot = "cell.embeddings", new.data = manuscript_tsne_embeddings)
head(manuscript_tsne_embeddings)
sl <- SetDimReduction(sl, reduction.type = "manuscript.tsne", slot = "key", new.data = "manuscript.tsne")
DimPlot(object = sl, reduction.use = "manuscript.tsne", pt.size = 0.5)
sl <- SetDimReduction(sl, reduction.type = "manuscript.tsne", slot = "cell.embeddings", new.data = manuscript_tsne_embeddings)
sl <- SetDimReduction(sl, reduction.type = "manuscript.tsne", slot = "key", new.data = "manuscript.tsne")
DimPlot(object = sl, reduction.use = "manuscript.tsne", pt.size = 0.5)
## High resolution Louvain clustering
sl <- FindClusters(object = sl, reduction.type = "pca", dims.use = 1:40, resolution = 10, save.SNN = TRUE, print.output = F)
object <- sl
averages <- AverageExpression(object = object)
merged_clusters <- as.character(object@ident)
counter = 0
correlations <- cor(averages, averages)
correlations[lower.tri(correlations,diag=TRUE)] <- NA  #convert lower triangle and diagonal to NAs
correlations <- as.data.frame(as.table(correlations))  #Turn into a 3-column table
correlations=na.omit(correlations)  #Get rid of the junk we flagged above
correlations <- correlations[order(-abs(correlations$Freq)),]    #Sort by highest correlation (whether +ve or -ve)
tested = c("first")
for (i in 1:nrow(correlations)){
if (!(correlations[i,1] %in% tested) & !(correlations[i,2] %in% tested)){
tested <- c(tested, as.character(correlations[i,1]), as.character(correlations[i,2]))
diff_markers <- FindMarkers(object = object, ident.1 = correlations[i,1], ident.2 = correlations[i,2])
diff_markers <- tibble::rownames_to_column(diff_markers, var = "gene")
diff_markers_filtered <- diff_markers %>% filter(avg_logFC > log(2), p_val_adj <.05)
diff_markers_filtered2 <- diff_markers %>% filter(avg_logFC < log(0.5), p_val_adj <.05)
if(nrow(diff_markers_filtered) < 20 & nrow(diff_markers_filtered2) < 20){
new_cluster = paste(correlations[i,1], correlations[i,2], sep = ".")
merged_clusters[which(merged_clusters == correlations[i,1])] <- new_cluster
merged_clusters[which(merged_clusters == correlations[i,2])] <- new_cluster
counter = counter + 1
}
}
}
merged_clusters <- as.data.frame(merged_clusters)
row.names(merged_clusters) <- colnames(object@data)
object <- AddMetaData(object = object, metadata = merged_clusters, col.name = "merged_clusters")
object <- SetAllIdent(object = object, id = "merged_clusters")
DimPlot(object = sl, reduction.use = "manuscript.tsne", pt.size = 0.5)
DimPlot(object = object, reduction.use = "manuscript.tsne", pt.size = 0.5)
averages <- AverageExpression(object = object)
merged_clusters <- as.character(object@ident)
counter = 0
correlations <- cor(averages, averages)
correlations[lower.tri(correlations,diag=TRUE)] <- NA  #convert lower triangle and diagonal to NAs
correlations <- as.data.frame(as.table(correlations))  #Turn into a 3-column table
correlations=na.omit(correlations)  #Get rid of the junk we flagged above
correlations <- correlations[order(-abs(correlations$Freq)),]    #Sort by highest correlation (whether +ve or -ve)
tested = c("first")
for (i in 1:nrow(correlations)){
if (!(correlations[i,1] %in% tested) & !(correlations[i,2] %in% tested)){
tested <- c(tested, as.character(correlations[i,1]), as.character(correlations[i,2]))
diff_markers <- FindMarkers(object = object, ident.1 = correlations[i,1], ident.2 = correlations[i,2])
diff_markers <- tibble::rownames_to_column(diff_markers, var = "gene")
diff_markers_filtered <- diff_markers %>% filter(avg_logFC > log(2), p_val_adj <.05)
diff_markers_filtered2 <- diff_markers %>% filter(avg_logFC < log(0.5), p_val_adj <.05)
if(nrow(diff_markers_filtered) < 20 & nrow(diff_markers_filtered2) < 20){
new_cluster = paste(correlations[i,1], correlations[i,2], sep = ".")
merged_clusters[which(merged_clusters == correlations[i,1])] <- new_cluster
merged_clusters[which(merged_clusters == correlations[i,2])] <- new_cluster
counter = counter + 1
}
}
}
merged_clusters <- as.data.frame(merged_clusters)
row.names(merged_clusters) <- colnames(object@data)
object <- AddMetaData(object = object, metadata = merged_clusters, col.name = "merged_clusters")
object <- SetAllIdent(object = object, id = "merged_clusters")
counter
DimPlot(object = object, reduction.use = "manuscript.tsne", pt.size = 0.5)
averages <- AverageExpression(object = object)
merged_clusters <- as.character(object@ident)
counter = 0
correlations <- cor(averages, averages)
correlations[lower.tri(correlations,diag=TRUE)] <- NA  #convert lower triangle and diagonal to NAs
correlations <- as.data.frame(as.table(correlations))  #Turn into a 3-column table
correlations=na.omit(correlations)  #Get rid of the junk we flagged above
correlations <- correlations[order(-abs(correlations$Freq)),]    #Sort by highest correlation (whether +ve or -ve)
tested = c("first")
for (i in 1:nrow(correlations)){
if (!(correlations[i,1] %in% tested) & !(correlations[i,2] %in% tested)){
tested <- c(tested, as.character(correlations[i,1]), as.character(correlations[i,2]))
diff_markers <- FindMarkers(object = object, ident.1 = correlations[i,1], ident.2 = correlations[i,2])
diff_markers <- tibble::rownames_to_column(diff_markers, var = "gene")
diff_markers_filtered <- diff_markers %>% filter(avg_logFC > log(2), p_val_adj <.05)
diff_markers_filtered2 <- diff_markers %>% filter(avg_logFC < log(0.5), p_val_adj <.05)
if(nrow(diff_markers_filtered) < 20 & nrow(diff_markers_filtered2) < 20){
new_cluster = paste(correlations[i,1], correlations[i,2], sep = ".")
merged_clusters[which(merged_clusters == correlations[i,1])] <- new_cluster
merged_clusters[which(merged_clusters == correlations[i,2])] <- new_cluster
counter = counter + 1
}
}
}
merged_clusters <- as.data.frame(merged_clusters)
row.names(merged_clusters) <- colnames(object@data)
object <- AddMetaData(object = object, metadata = merged_clusters, col.name = "merged_clusters")
object <- SetAllIdent(object = object, id = "merged_clusters")
counter
DimPlot(object = object, reduction.use = "manuscript.tsne", pt.size = 0.5)
averages <- AverageExpression(object = object)
merged_clusters <- as.character(object@ident)
counter = 0
correlations <- cor(averages, averages)
correlations[lower.tri(correlations,diag=TRUE)] <- NA  #convert lower triangle and diagonal to NAs
correlations <- as.data.frame(as.table(correlations))  #Turn into a 3-column table
correlations=na.omit(correlations)  #Get rid of the junk we flagged above
correlations <- correlations[order(-abs(correlations$Freq)),]    #Sort by highest correlation (whether +ve or -ve)
tested = c("first")
for (i in 1:nrow(correlations)){
if (!(correlations[i,1] %in% tested) & !(correlations[i,2] %in% tested)){
tested <- c(tested, as.character(correlations[i,1]), as.character(correlations[i,2]))
diff_markers <- FindMarkers(object = object, ident.1 = correlations[i,1], ident.2 = correlations[i,2])
diff_markers <- tibble::rownames_to_column(diff_markers, var = "gene")
diff_markers_filtered <- diff_markers %>% filter(avg_logFC > log(2), p_val_adj <.05)
diff_markers_filtered2 <- diff_markers %>% filter(avg_logFC < log(0.5), p_val_adj <.05)
if(nrow(diff_markers_filtered) < 20 & nrow(diff_markers_filtered2) < 20){
new_cluster = paste(correlations[i,1], correlations[i,2], sep = ".")
merged_clusters[which(merged_clusters == correlations[i,1])] <- new_cluster
merged_clusters[which(merged_clusters == correlations[i,2])] <- new_cluster
counter = counter + 1
}
}
}
merged_clusters <- as.data.frame(merged_clusters)
row.names(merged_clusters) <- colnames(object@data)
object <- AddMetaData(object = object, metadata = merged_clusters, col.name = "merged_clusters")
object <- SetAllIdent(object = object, id = "merged_clusters")
counter
DimPlot(object = object, reduction.use = "manuscript.tsne", pt.size = 0.5)
averages <- AverageExpression(object = object)
merged_clusters <- as.character(object@ident)
counter = 0
correlations <- cor(averages, averages)
correlations[lower.tri(correlations,diag=TRUE)] <- NA  #convert lower triangle and diagonal to NAs
correlations <- as.data.frame(as.table(correlations))  #Turn into a 3-column table
correlations=na.omit(correlations)  #Get rid of the junk we flagged above
correlations <- correlations[order(-abs(correlations$Freq)),]    #Sort by highest correlation (whether +ve or -ve)
tested = c("first")
for (i in 1:nrow(correlations)){
if (!(correlations[i,1] %in% tested) & !(correlations[i,2] %in% tested)){
tested <- c(tested, as.character(correlations[i,1]), as.character(correlations[i,2]))
diff_markers <- FindMarkers(object = object, ident.1 = correlations[i,1], ident.2 = correlations[i,2])
diff_markers <- tibble::rownames_to_column(diff_markers, var = "gene")
diff_markers_filtered <- diff_markers %>% filter(avg_logFC > log(2), p_val_adj <.05)
diff_markers_filtered2 <- diff_markers %>% filter(avg_logFC < log(0.5), p_val_adj <.05)
if(nrow(diff_markers_filtered) < 20 & nrow(diff_markers_filtered2) < 20){
new_cluster = paste(correlations[i,1], correlations[i,2], sep = ".")
merged_clusters[which(merged_clusters == correlations[i,1])] <- new_cluster
merged_clusters[which(merged_clusters == correlations[i,2])] <- new_cluster
counter = counter + 1
}
}
}
merged_clusters <- as.data.frame(merged_clusters)
row.names(merged_clusters) <- colnames(object@data)
object <- AddMetaData(object = object, metadata = merged_clusters, col.name = "merged_clusters")
object <- SetAllIdent(object = object, id = "merged_clusters")
counter
DimPlot(object = object, reduction.use = "manuscript.tsne", pt.size = 0.5)
head(object@ide3nt)
head(object@ident)
############ END OF MERGING ALGORITHM
sl_saved <- object
object <- sl
1/2
object <- merge_clusters(object = object, num.genes = 20, fold.difference = 2, adj.p.value = 0.05)
merge_clusters <- function(object, num.genes = 20, fold.difference = 2, adj.p.value = 0.05) {
# first loop lumps clusters with 2 or fewer cells into nearest neighbor clusters (only if necessary)
if(min(table(object@ident)) < 3){
counter = 1
while(counter > 0){
print("Merging clusters with 2 or fewer cells into nearest neighbor cluster")
counter = 0
averages <- AverageExpression(object, show.progress = F)
merged_clusters <- as.character(object@ident)
correlations <- cor(averages, averages)
correlations[lower.tri(correlations,diag=TRUE)] <- NA  #convert lower triangle and diagonal to NAs
correlations <- as.data.frame(as.table(correlations))  #convert to 3-column table
correlations <- na.omit(correlations)  #Get rid of the NAs from lower triangle (duplicates)
correlations <- correlations[order(-abs(correlations$Freq)),]  #Sort by highest correlation (whether +ve or -ve)
for(i in levels(object@ident)){
if(length(which(object@ident == i)) < 3){
index <- which(correlations == i, arr.ind = T)[1,]
closest_cluster <- correlations[index[1],]
new_cluster = paste(as.character(closest_cluster[1,1]),as.character(closest_cluster[1,2]),sep = ".")
merged_clusters[which(merged_clusters == closest_cluster[1,1])] <- new_cluster
merged_clusters[which(merged_clusters == closest_cluster[1,2])] <- new_cluster
counter = counter + 1
}
}
merged_clusters <- as.data.frame(merged_clusters)
row.names(merged_clusters) <- colnames(object@data)
object <- AddMetaData(object = object, metadata = merged_clusters, col.name = "merged_clusters")
object <- SetAllIdent(object = object, id = "merged_clusters")
print(paste(as.character(counter), " clusters with 1 or 2 cells merged with nearest neighbor cluster"), sep = "")
}
}
#LOOP 2 iteratively merges clusters that do not satisfy threshold criteria
counter = 1
while (counter > 0){
print(paste("Merging nearest-neighbor clusters with less than ", as.character(num.genes), " genes with log fold difference of ", as.character(fold.difference), ".", sep = ""))
averages <- AverageExpression(object = object, show.progress = F)
merged_clusters <- as.character(object@ident)
counter = 0
correlations <- cor(averages, averages)
correlations[lower.tri(correlations,diag=TRUE)] <- NA  #convert lower triangle and diagonal to NAs
correlations <- as.data.frame(as.table(correlations))  #Turn into a 3-column table
correlations=na.omit(correlations)  #Get rid of the junk we flagged above
correlations <- correlations[order(-abs(correlations$Freq)),]    #Sort by highest correlation (whether +ve or -ve)
tested = c("first")
for (i in 1:nrow(correlations)){
if (!(correlations[i,1] %in% tested) & !(correlations[i,2] %in% tested)){
if(length(which(object@ident == as.character(correlations[i,1])))>2 & length(which(object@ident == as.character(correlations[i,2])))>2){
tested <- c(tested, as.character(correlations[i,1]), as.character(correlations[i,2]))
diff_markers <- FindMarkers(object = object, ident.1 = correlations[i,1], ident.2 = correlations[i,2], print.bar = F, min.pct = 0.25)
diff_markers <- tibble::rownames_to_column(diff_markers, var = "gene")
diff_markers_filtered <- diff_markers %>% filter(avg_logFC > log(fold.difference), p_val_adj < adj.p.value)
diff_markers_filtered2 <- diff_markers %>% filter(avg_logFC < log(1/fold.difference), p_val_adj < adj.p.value)
if(nrow(diff_markers_filtered) < num.genes & nrow(diff_markers_filtered2) < num.genes){
new_cluster = paste(correlations[i,1], correlations[i,2], sep = ".")
merged_clusters[which(merged_clusters == correlations[i,1])] <- new_cluster
merged_clusters[which(merged_clusters == correlations[i,2])] <- new_cluster
counter = counter + 1
}
}
}
}
merged_clusters <- as.data.frame(merged_clusters)
row.names(merged_clusters) <- colnames(object@data)
object <- AddMetaData(object = object, metadata = merged_clusters, col.name = "merged_clusters")
object <- SetAllIdent(object = object, id = "merged_clusters")
print(paste(as.character(counter), " clusters merged with nearest neighbor cluster"), sep = "")
}
return(object)
}
object <- merge_clusters(object = object, num.genes = 20, fold.difference = 2, adj.p.value = 0.05)
DimPlot(object = object, reduction.use = "manuscript.tsne", pt.size = 0.5)
sl <- object
length(sl@ident)
head(which(sl@ident == sl_saved@ident))
head(sl@ident == sl_saved@ident)
length(which(sl@ident == sl_saved@ident))
rm(sl_saved)
help(cor)
DimPlot(object = sl, reduction.use = "manuscript.tsne", pt.size = 0.5)
help(DimPlot)
DimPlot(object = sl, reduction.use = "manuscript.tsne", pt.size = 0.5, do.label = T)
# rename clusters to reflect those used in manuscript
identities <- levels(sl@ident)
manuscript_clusters <- c("2", "8", "3", "5", "16", "1", "7", "6", "4", "10", "11", "12", "20", "27", "25", "13", "17", "14", "33", "9", "26", "15", "31", "38", "42", "24", "29", "19", "30", "22", "23", "28", "40", "36", "21", "18", "39", "35", "32", "34", "37", "41")
cell_type_assignments <- plyr::mapvalues(sl@ident, identities, manuscript_clusters)
sl <- AddMetaData(object = sl, metadata = cell_type_assignments, col.name = "manuscript_cluster_numbers")
head(sl@meta.data)
sl <- SetAllIdent(object = sl, id =  "manuscript_cluster_numbers")
head(sl@ident)
DimPlot(object = sl, reduction.use = "manuscript.tsne", pt.size = 0.5, do.label = T)
help(FindAllMarkers)
help(averages)
help(averages)
hhelp(AverageExpression)
help(AverageExpression)
help(which.max)
## Distinguish between clusters with uniquely expressed genes and transitional clusters that lack unique markers
averages <- AverageExpression(object = sl) # calculate avg. expression matrix for each cluster
max_exp_index <- apply(averages, MARGIN = 1, FUN = which.max)  # create index vector of cluster with maximum expression for each gene
max_exp_cluster <- colnames(averages)[max_exp_index] # create vector with the cluster that has highest expression for each gene
names(max_exp_cluster) <- row.names(averages) # name each element of previous vector with gene name
head(max_exp_cluster)
gene
head(sl@ident)
# filter marker table to only contain "unique" markers, i.e. those markers that are most highly expressed in each cluster
unique_markers <- markers %>%
filter(p_val_adj < 0.5, avg_logFC > log(2), cluster == max_exp_cluster[gene])
# identify marker genes
markers <- FindAllMarkers(object = sl, only.pos = TRUE, logfc.thrheshold = 0.25, test.use = "wilcox", min.pct = 0.1)
# filter marker table to only contain "unique" markers, i.e. those markers that are most highly expressed in each cluster
unique_markers <- markers %>%
filter(p_val_adj < 0.5, avg_logFC > log(2), cluster == max_exp_cluster[gene])
# create table with number of unique markers for each cluster
marker_count <- as.data.frame(table(unique_markers$cluster))
head(marker_count)
rm(object)
transitional_assignment <- as.character(sl@ident)
transitional_clusters <- as.character(marker_count$Var1[marker_count$Freq < 20])
transitional_clusters
length(transitional_clusters)
for (x in transitional_clusters){
transitional_assignment[transitional_assignment == x] <- "transitional"
transitional_assignment <- as.data.frame(transitional_assignment)
row.names(transitional_assignment) <- names(sl@ident)
colnames(assignment) <- paste("transitional_clusters_", as.character(i), sep = "")
#sl <- AddMetaData(object = sl, metadata = assignment)
#sl <- SetAllIdent(object = sl, id = paste("transitional_clusters_", as.character(i), sep = ""))
#tsneplot <- TSNEPlot(object = sl, do.label = T, do.return = T, pt.size = 1, label.size = 4)
#cowplot::ggsave(filename = paste("tsne_stable_jake_cluster_transitional_",as.character(i),".pdf", sep = ""), plot = tsneplot, units = "in", width = 12, height = 10)
}
transitional_assignment <- as.character(sl@ident)
transitional_clusters <- as.character(marker_count$Var1[marker_count$Freq < 20])
for (x in transitional_clusters){
transitional_assignment[transitional_assignment == x] <- "transitional"
transitional_assignment <- as.data.frame(transitional_assignment)
row.names(transitional_assignment) <- names(sl@ident)
colnames(assignment) <- paste("transitional_clusters_", as.character(i), sep = "")
#sl <- AddMetaData(object = sl, metadata = assignment)
#sl <- SetAllIdent(object = sl, id = paste("transitional_clusters_", as.character(i), sep = ""))
#tsneplot <- TSNEPlot(object = sl, do.label = T, do.return = T, pt.size = 1, label.size = 4)
#cowplot::ggsave(filename = paste("tsne_stable_jake_cluster_transitional_",as.character(i),".pdf", sep = ""), plot = tsneplot, units = "in", width = 12, height = 10)
}
x
transitional_clusters
transitional_assignment[transitional_assignment == x] <- "transitional"
transitional_assignment <- as.data.frame(transitional_assignment)
row.names(transitional_assignment) <- names(sl@ident)
head(transitional_assignment)
for (x in transitional_clusters){
transitional_assignment[transitional_assignment == x] <- "transitional"
transitional_assignment <- as.data.frame(transitional_assignment)
row.names(transitional_assignment) <- names(sl@ident)
#colnames(assignment) <- paste("transitional_clusters_", as.character(i), sep = "")
#sl <- AddMetaData(object = sl, metadata = assignment)
#sl <- SetAllIdent(object = sl, id = paste("transitional_clusters_", as.character(i), sep = ""))
#tsneplot <- TSNEPlot(object = sl, do.label = T, do.return = T, pt.size = 1, label.size = 4)
#cowplot::ggsave(filename = paste("tsne_stable_jake_cluster_transitional_",as.character(i),".pdf", sep = ""), plot = tsneplot, units = "in", width = 12, height = 10)
}
transitional_assignment <- as.character(sl@ident)
transitional_clusters <- as.character(marker_count$Var1[marker_count$Freq < 20])
for (x in transitional_clusters){
transitional_assignment[transitional_assignment == x] <- "transitional"
transitional_assignment <- as.data.frame(transitional_assignment)
row.names(transitional_assignment) <- names(sl@ident)
#colnames(assignment) <- paste("transitional_clusters_", as.character(i), sep = "")
#sl <- AddMetaData(object = sl, metadata = assignment)
#sl <- SetAllIdent(object = sl, id = paste("transitional_clusters_", as.character(i), sep = ""))
#tsneplot <- TSNEPlot(object = sl, do.label = T, do.return = T, pt.size = 1, label.size = 4)
#cowplot::ggsave(filename = paste("tsne_stable_jake_cluster_transitional_",as.character(i),".pdf", sep = ""), plot = tsneplot, units = "in", width = 12, height = 10)
}
transitional_assignment
head(transitional_assignment)
sl <- AddMetaData(object = sl, metadata = transitional_assignment)
sl <- SetAllIdent(object = sl, id = "transitional_assignment")
head(sl@ident)
DimPlot(object = sl, reduction.use = "manuscript.tsne", pt.size = 0.5, do.label = T)
transitional_assignment <- as.character(sl@ident)
transitional_clusters <- as.character(marker_count$Var1[marker_count$Freq < 30])
for (x in transitional_clusters){
transitional_assignment[transitional_assignment == x] <- "transitional"
transitional_assignment <- as.data.frame(transitional_assignment)
row.names(transitional_assignment) <- names(sl@ident)
#colnames(assignment) <- paste("transitional_clusters_", as.character(i), sep = "")
#sl <- AddMetaData(object = sl, metadata = assignment)
#sl <- SetAllIdent(object = sl, id = paste("transitional_clusters_", as.character(i), sep = ""))
#tsneplot <- TSNEPlot(object = sl, do.label = T, do.return = T, pt.size = 1, label.size = 4)
#cowplot::ggsave(filename = paste("tsne_stable_jake_cluster_transitional_",as.character(i),".pdf", sep = ""), plot = tsneplot, units = "in", width = 12, height = 10)
}
sl <- AddMetaData(object = sl, metadata = transitional_assignment)
sl <- SetAllIdent(object = sl, id = "transitional_assignment")
DimPlot(object = sl, reduction.use = "manuscript.tsne", pt.size = 0.5, do.label = T)
save.image("~/Documents/Research/EMBL/manuscripts/spongilla_sc_manuscript/methods/gitlab_repo/whole-body-single-cell-rna-sequencing-reveals-components-of-elementary-neural-circuits-in-a-sponge/single_cell_analysis/data/cell_type_clustering.RData")
